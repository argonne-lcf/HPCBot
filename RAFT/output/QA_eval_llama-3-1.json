{
    "How can I run a job on Polaris? Write an example job submission script?": "To run a job on Polaris and submit an example job submission script, follow these steps:\n\n1. Request an interactive job from `polaris-login` using the command:\n```\nqsub -A <project> -q debug-scaling -l select=2 -l walltime=01:00:00 -I\n```\n2. Load the conda module and activate the base environment:\n```bash\nmodule load conda ; conda activate base\n```\n3. Create a job submission script (e.g., `submit.sh`) with the following content:\n```bash\n#!/bin/sh\n\nPBS -l select=1:system=polaris\nPBS -l walltime=0:30:00\nPBS -q debug\nPBS -A Catalyst\nPBS -l filesystems=home:eagle\ncd ${PBS_O_WORKDIR} mpiexec -n 1 ./executable\n```\n4. Submit the script to the Polaris queue using:\n```bash\nqsub -l select=1:system=polaris -l walltime=0:30:00 -l filesystems=home:eagle -q debug -A Catalyst ./submit.sh\n```\nNote that you can modify the job parameters (e.g., number of processes, nodes, and walltime) as needed.",
    "How to login to polaris": "To login to Polaris, start up VisIt on your local machine, click File -> Open File and choose \"ANL Polaris\" from the \"Host\" dropdown. You'll be prompted for your password; enter your ALCF authenticator app response. Then, specify the \"Bank\" (Project) to use when VisIt submits jobs to the queue on Polaris. If you need to set a default project, go to Options -> Host profiles.",
    "What is Gromacs": "GROMACS is a molecular dynamics package used to simulate the Newtonian equations of motion for systems with hundreds to millions of particles, primarily designed for biochemical molecules.",
    "How to use GROMACS on Polaris": "To use GROMACS on Polaris, follow these steps:\n\n1. Build GROMACS using the provided instructions:\n\t* Download the latest source code from http://manual.gromacs.org/documentation/20.22.1/download.html\n\t* Run `tar -xzf gromacs-20.22.1.tar.gz`\n\t* Load the necessary modules: `module swap PrgEnv-nvhpc PrgEnv-gnu`, `module load cudatoolkit-standalone/11.2.2`, and `module load gcc/10.3.0`\n\t* Run `cmake` with the required flags, including `-DCMAKE_C_COMPILER=cc -DCMAKE_CXX_COMPILER=CC ...`\n\t* Run `make â€“j 8` and then `make install`\n2. The installed binary is located at `build/bin/gmx_mpi`.\n3. To run GROMACS on Polaris, use a sample PBS script that allocates two nodes with 4 MPI ranks per node, each rank using four OpenMP threads.\n4. Submit the job script to Polaris or start an interactive job mode.\n\nNote: The provided context does not explicitly state how to use GROMACS itself, but rather provides instructions on how to build and run it on Polaris.",
    "What type of workflow managers I can use on Polaris?": "You can use Balsam as a workflow manager on Polaris.",
    "What are the storage systems available on Polaris?": "The storage systems available on Polaris include:\n\n* ALCF global file systems (details can be found here)\n* Local SSDs with a total capacity of 1.6 TB per node, configured in RAID0 for user use.",
    "What is the default programming environment on Polaris?": "The default programming environment on Polaris is NVHPC.",
    "How can I change the programming environment on Polaris?": "To change the programming environment on Polaris, you can follow these steps:\n\n1. Load the desired module for your programming language and model using the `module` command.\n2. Check that the correct compiler wrappers (cc, CC, or ftn) are loaded by running `$ module list`.\n3. Build your application with the chosen compiler wrapper.\n4. Submit your job script to Polaris or start an interactive job mode using `qsub -I`.\n\nNote: Be sure to save any changes you make to the job settings under the Options menu if you want them to be used as your default.",
    "What is the difference between eagle and grand filesystems?": "The difference between \"eagle\" and \"grand\" filesystems on Polaris is not explicitly stated in the provided context, but based on the information given, it appears that:\n\n* The \"eagle\" filesystem is requested when submitting a job script to the debug queue, as shown in the example command: `PBS -l filesystems=home:eagle`\n* The \"grand\" filesystem is mentioned as an alternative location for the Julia depot directory, where the environment variable `JULIA_DEPOT_PATH` is set to `/grand/$PROJECT/$USER/julia_depot`\n\nTherefore, it can be inferred that \"eagle\" and \"grand\" are two different filesystems available on Polaris, with \"eagle\" being used for job submissions and \"grand\" being used as a location for Julia project environments.",
    "How can I view the modules loaded?": "To view the modules loaded, you can run the command `module list`.",
    "Is there a difference between swap and switch?": "The code snippet you provided is a C++ program that uses the SYCL framework to perform some computations on a distributed system. The question \"Is there a difference between swap and switch?\" seems unrelated to the provided context.\n\nHowever, based on the context, I can provide an answer:\n\nIn this specific code snippet, `swap` and `switch` are not used. But in general, in C++, `swap` is a function that exchanges the values of two variables, while `switch` is a statement that allows for multiple conditional execution paths.\n\nSo, to answer your question: Yes, there is a difference between swap and switch.",
    "Do you use spack to build modules?": "Yes, you use spack to build modules."
}